(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{270:function(_,e,t){"use strict";t.r(e);var v=t(38),a=Object(v.a)({},function(){var _=this,e=_.$createElement,t=_._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"mysql-性能优化方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-性能优化方案","aria-hidden":"true"}},[_._v("#")]),_._v(" mysql 性能优化方案")]),_._v(" "),t("p",[_._v("网上有不少mysql 性能优化方案，不过，mysql的优化同sql server相比，更为麻烦与复杂，同样的设置，在不同的环境下 ，由于内存，访问量，读写频率，数据差异等等情况，可能会出现不同的结果，因此简单地根据某个给出方案来配置mysql是行不通的，最好能使用 status信息对mysql进行具体的优化。")]),_._v(" "),t("p",[_._v("mysql> show global status;")]),_._v(" "),t("p",[_._v("可以列出mysql服务器运行各种状态值，另外，查询mysql服务器配置信息语句：")]),_._v(" "),t("p",[_._v("mysql> show variables;")]),_._v(" "),t("h2",{attrs:{id:"一、慢查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、慢查询","aria-hidden":"true"}},[_._v("#")]),_._v(" 一、慢查询")]),_._v(" "),t("p",[_._v("mysql> show variables like 'slow%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("log_slow_queries")]),_._v(" "),t("td",[_._v("on")])]),_._v(" "),t("tr",[t("td",[_._v("slow_launch_time")]),_._v(" "),t("td",[_._v("2")])])])]),_._v(" "),t("p",[_._v("mysql> show global status like 'slow%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("slow_launch_threads")]),_._v(" "),t("td",[_._v("0")])]),_._v(" "),t("tr",[t("td",[_._v("slow_queries")]),_._v(" "),t("td",[_._v("4148")])])])]),_._v(" "),t("p",[_._v("配置中打开了记录慢查询，执行时间超过2秒的即为慢查询，系统显示有4148个慢查询，你可以分析慢查询日志，找出有问题的sql语句，慢查询时间不宜设置 过长，否则意义不大，最好在5秒以内，如果你需要微秒级别的慢查询，可以考虑给mysql打补丁：http://www.percona.com /docs/wiki/release:start，记得找对应的版本。")]),_._v(" "),t("p",[_._v("打开慢查询日志可能会对系统性能有一点点影响，如果你的mysql是主－从结构，可以考虑打开其中一台从服务器的慢查询日志，这样既可以监控慢查询，对系统性能影响又小。")]),_._v(" "),t("h2",{attrs:{id:"二、连接数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、连接数","aria-hidden":"true"}},[_._v("#")]),_._v(" 二、连接数")]),_._v(" "),t("p",[_._v("经 常会遇见”mysql: error 1040: too many connections”的情况，一种是访问量确实很高，mysql服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是mysql配 置文件中max_connections值过小：")]),_._v(" "),t("p",[_._v("mysql> show variables like 'max_connections';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("max_connections")]),_._v(" "),t("td",[_._v("256")])])])]),_._v(" "),t("p",[_._v("这台mysql服务器最大连接数是256，然后查询一下服务器响应的最大连接数：")]),_._v(" "),t("p",[_._v("mysql> show global status like 'max_used_connections';")]),_._v(" "),t("p",[_._v("mysql服务器过去的最大连接数是245，没有达到服务器连接数上限256，应该没有出现1040错误，比较理想的设置是")]),_._v(" "),t("p",[_._v("max_used_connections / max_connections * 100% ≈ 85%")]),_._v(" "),t("p",[_._v("最大连接数占上限连接数的85％左右，如果发现比例在10%以下，mysql服务器连接数上限设置的过高了。")]),_._v(" "),t("h2",{attrs:{id:"三、key-buffer-size"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、key-buffer-size","aria-hidden":"true"}},[_._v("#")]),_._v(" 三、key_buffer_size")]),_._v(" "),t("p",[_._v("key_buffer_size是对myisam表性能影响最大的一个参数，下面一台以myisam为主要存储引擎服务器的配置：")]),_._v(" "),t("p",[_._v("mysql> show variables like 'key_buffer_size';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("key_buffer_size")]),_._v(" "),t("td",[_._v("536870912")])])])]),_._v(" "),t("p",[_._v("分配了512mb内存给key_buffer_size，我们再看一下key_buffer_size的使用情况：")]),_._v(" "),t("p",[_._v("mysql> show global status like 'key_read%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("key_read_requests")]),_._v(" "),t("td",[_._v("27813678764")])]),_._v(" "),t("tr",[t("td",[_._v("key_reads")]),_._v(" "),t("td",[_._v("6798830")])])])]),_._v(" "),t("p",[_._v("一共有27813678764个索引读取请求，有6798830个请求在内存中没有找到直接从硬盘读取索引，计算索引未命中缓存的概率：")]),_._v(" "),t("p",[_._v("key_cache_miss_rate ＝ key_reads / key_read_requests * 100%")]),_._v(" "),t("p",[_._v("比 如上面的数据，key_cache_miss_rate为0.0244%，4000个索引读取请求才有一个直接读硬盘，已经很bt 了，key_cache_miss_rate在0.1%以下都很好（每1000个请求有一个直接读硬盘），如果key_cache_miss_rate在 0.01%以下的话，key_buffer_size分配的过多，可以适当减少。")]),_._v(" "),t("p",[_._v("mysql服务器还提供了key_blocks_*参数：")]),_._v(" "),t("p",[_._v("mysql> show global status like 'key_blocks_u%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("key_blocks_unused")]),_._v(" "),t("td",[_._v("0")])]),_._v(" "),t("tr",[t("td",[_._v("key_blocks_used")]),_._v(" "),t("td",[_._v("413543")])])])]),_._v(" "),t("p",[_._v("key_blocks_unused 表示未使用的缓存簇(blocks)数，key_blocks_used表示曾经用到的最大的blocks数，比如这台服务器，所有的缓存都用到了，要么 增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置：")]),_._v(" "),t("p",[_._v("key_blocks_used / (key_blocks_unused + key_blocks_used) * 100% ≈ 80%")]),_._v(" "),t("h2",{attrs:{id:"四、临时表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、临时表","aria-hidden":"true"}},[_._v("#")]),_._v(" 四、临时表")]),_._v(" "),t("p",[_._v("mysql> show global status like 'created_tmp%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("created_tmp_disk_tables")]),_._v(" "),t("td",[_._v("21197")])]),_._v(" "),t("tr",[t("td",[_._v("created_tmp_files")]),_._v(" "),t("td",[_._v("58")])]),_._v(" "),t("tr",[t("td",[_._v("created_tmp_tables")]),_._v(" "),t("td",[_._v("1771587")])])])]),_._v(" "),t("p",[_._v("每次创建临时表，created_tmp_tables增加，如果是在磁盘上创建临时表，created_tmp_disk_tables也增加,created_tmp_files表示mysql服务创建的临时文件文件数，比较理想的配置是：")]),_._v(" "),t("p",[_._v("created_tmp_disk_tables / created_tmp_tables * 100% <= 25%比如上面的服务器created_tmp_disk_tables / created_tmp_tables * 100% ＝ 1.20%，应该相当好了。我们再看一下mysql服务器对临时表的配置：")]),_._v(" "),t("p",[_._v("mysql> show variables where variable_name in ('tmp_table_size', 'max_heap_table_size');")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("max_heap_table_size")]),_._v(" "),t("td",[_._v("268435456")])]),_._v(" "),t("tr",[t("td",[_._v("tmp_table_size")]),_._v(" "),t("td",[_._v("536870912")])])])]),_._v(" "),t("p",[_._v("只有256mb以下的临时表才能全部放内存，超过的就会用到硬盘临时表。")]),_._v(" "),t("h2",{attrs:{id:"五、open-table情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、open-table情况","aria-hidden":"true"}},[_._v("#")]),_._v(" 五、open table情况")]),_._v(" "),t("p",[_._v("mysql> show global status like 'open%tables%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("open_tables")]),_._v(" "),t("td",[_._v("919")])]),_._v(" "),t("tr",[t("td",[_._v("opened_tables")]),_._v(" "),t("td",[_._v("1951")])])])]),_._v(" "),t("p",[_._v("open_tables 表示打开表的数量，opened_tables表示打开过的表数量，如果opened_tables数量过大，说明配置中 table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache值：")]),_._v(" "),t("p",[_._v("mysql> show variables like 'table_cache';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("table_cache")]),_._v(" "),t("td",[_._v("2048")])])])]),_._v(" "),t("p",[_._v("比较合适的值为：")]),_._v(" "),t("p",[_._v("open_tables / opened_tables * 100% >= 85%")]),_._v(" "),t("p",[_._v("open_tables / table_cache * 100% <= 95%")]),_._v(" "),t("h2",{attrs:{id:"六、进程使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、进程使用情况","aria-hidden":"true"}},[_._v("#")]),_._v(" 六、进程使用情况")]),_._v(" "),t("p",[_._v("mysql> show global status like 'thread%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("threads_cached")]),_._v(" "),t("td",[_._v("46")])]),_._v(" "),t("tr",[t("td",[_._v("threads_connected")]),_._v(" "),t("td",[_._v("2")])]),_._v(" "),t("tr",[t("td",[_._v("threads_created")]),_._v(" "),t("td",[_._v("570")])]),_._v(" "),t("tr",[t("td",[_._v("threads_running")]),_._v(" "),t("td",[_._v("1")])])])]),_._v(" "),t("p",[_._v("如 果我们在mysql服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户 而不是销毁（前提是缓存数未达上限）。threads_created表示创建过的线程数，如果发现threads_created值过大的话，表明 mysql服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器 thread_cache_size配置：")]),_._v(" "),t("p",[_._v("mysql> show variables like 'thread_cache_size';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("thread_cache_size")]),_._v(" "),t("td",[_._v("64")])])])]),_._v(" "),t("p",[_._v("示例中的服务器还是挺健康的。")]),_._v(" "),t("h2",{attrs:{id:"七、查询缓存-query-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、查询缓存-query-cache","aria-hidden":"true"}},[_._v("#")]),_._v(" 七、查询缓存(query cache)")]),_._v(" "),t("p",[_._v("mysql> show global status like 'qcache%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("qcache_free_blocks")]),_._v(" "),t("td",[_._v("22756")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_free_memory")]),_._v(" "),t("td",[_._v("76764704")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_hits")]),_._v(" "),t("td",[_._v("213028692")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_inserts")]),_._v(" "),t("td",[_._v("208894227")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_lowmem_prunes")]),_._v(" "),t("td",[_._v("4010916")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_not_cached")]),_._v(" "),t("td",[_._v("13385031")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_queries_in_cache")]),_._v(" "),t("td",[_._v("43560")])]),_._v(" "),t("tr",[t("td",[_._v("qcache_total_blocks")]),_._v(" "),t("td",[_._v("111212")])])])]),_._v(" "),t("p",[_._v("mysql查询缓存变量解释：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。flush query cache会对缓存中的碎片进行整理，从而得到一个空闲块。")])]),_._v(" "),t("li",[t("p",[_._v("qcache_free_memory：缓存中的空闲内存。")])]),_._v(" "),t("li",[t("p",[_._v("qcache_hits：每次查询在缓存中命中时就增大")])]),_._v(" "),t("li",[t("p",[_._v("qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。")])]),_._v(" "),t("li",[t("p",[_._v("qcache_lowmem_prunes： 缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看；如果这个数字在不断增长，就表示可能碎片非常严重，或者内存 很少。（上面的 free_blocks和free_memory可以告诉您属于哪种情况）")])]),_._v(" "),t("li",[t("p",[_._v("qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 select 语句或者用了now()之类的函数。")])]),_._v(" "),t("li",[t("p",[_._v("qcache_queries_in_cache：当前缓存的查询（和响应）的数量。")])]),_._v(" "),t("li",[t("p",[_._v("qcache_total_blocks：缓存中块的数量。")])])]),_._v(" "),t("p",[_._v("我们再查询一下服务器关于query_cache的配置：")]),_._v(" "),t("p",[_._v("mysql> show variables like 'query_cache%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("query_cache_limit")]),_._v(" "),t("td",[_._v("2097152")])]),_._v(" "),t("tr",[t("td",[_._v("query_cache_min_res_unit")]),_._v(" "),t("td",[_._v("4096")])]),_._v(" "),t("tr",[t("td",[_._v("query_cache_size")]),_._v(" "),t("td",[_._v("203423744")])]),_._v(" "),t("tr",[t("td",[_._v("query_cache_type")]),_._v(" "),t("td",[_._v("on")])]),_._v(" "),t("tr",[t("td",[_._v("query_cache_wlock_invalidate")]),_._v(" "),t("td",[_._v("off")])])])]),_._v(" "),t("p",[_._v("各字段的解释：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("query_cache_limit：超过此大小的查询将不缓存")])]),_._v(" "),t("li",[t("p",[_._v("query_cache_min_res_unit：缓存块的最小大小")])]),_._v(" "),t("li",[t("p",[_._v("query_cache_size：查询缓存大小")])]),_._v(" "),t("li",[t("p",[_._v("query_cache_type：缓存类型，决定缓存什么样的查询，示例中表示不缓存 select sql_no_cache 查询")])]),_._v(" "),t("li",[t("p",[_._v("query_cache_wlock_invalidate：当有其他客户端正在对myisam表进行写操作时，如果查询在query cache中，是否返回cache结果还是等写操作完成再读表获取结果。")])]),_._v(" "),t("li",[t("p",[_._v("query_cache_min_res_unit的配置是一柄”双刃剑”，默认是4kb，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费。")])])]),_._v(" "),t("p",[_._v("查询缓存碎片率 = qcache_free_blocks / qcache_total_blocks * 100%")]),_._v(" "),t("p",[_._v("如果查询缓存碎片率超过20%，可以用flush query cache整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。")]),_._v(" "),t("p",[_._v("查询缓存利用率 = (query_cache_size - qcache_free_memory) / query_cache_size * 100%")]),_._v(" "),t("p",[_._v("查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小；查询缓存利用率在80％以上而且qcache_lowmem_prunes > 50的话说明query_cache_size可能有点小，要不就是碎片太多。")]),_._v(" "),t("p",[_._v("查询缓存命中率 = (qcache_hits - qcache_inserts) / qcache_hits * 100%")]),_._v(" "),t("p",[_._v("示例服务器 查询缓存碎片率 ＝ 20.46％，查询缓存利用率 ＝ 62.26％，查询缓存命中率 ＝ 1.94％，命中率很差，可能写操作比较频繁吧，而且可能有些碎片。")]),_._v(" "),t("h2",{attrs:{id:"八、排序使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、排序使用情况","aria-hidden":"true"}},[_._v("#")]),_._v(" 八、排序使用情况")]),_._v(" "),t("p",[_._v("mysql> show global status like 'sort%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("sort_merge_passes")]),_._v(" "),t("td",[_._v("29")])]),_._v(" "),t("tr",[t("td",[_._v("sort_range")]),_._v(" "),t("td",[_._v("37432840")])]),_._v(" "),t("tr",[t("td",[_._v("sort_rows")]),_._v(" "),t("td",[_._v("9178691532")])]),_._v(" "),t("tr",[t("td",[_._v("sort_scan")]),_._v(" "),t("td",[_._v("1860569")])])])]),_._v(" "),t("ul",[t("li",[_._v("sort_merge_passes 包括两步。mysql 首先会尝试在内存中做排序，使用的内存大小由系统变量 sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，mysql 就会把每次在内存中排序的结果存到临时文件中，等 mysql 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 sort_merge_passes。实际上，mysql 会用另一个临时文件来存再次排序的结果，所以通常会看到 sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 sort_buffer_size 会减少 sort_merge_passes 和 创建临时文件的次数。但盲目的增加 sort_buffer_size 并不一定能提高速度，见 how fast can you sort data with mysql?（引自http://qroom.blogspot.com/2007/09/mysql-select-sort.html，貌似被墙）")])]),_._v(" "),t("p",[_._v("另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/")]),_._v(" "),t("h2",{attrs:{id:"九、文件打开数-open-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、文件打开数-open-files","aria-hidden":"true"}},[_._v("#")]),_._v(" 九、文件打开数(open_files)")]),_._v(" "),t("p",[_._v("mysql> show global status like 'open_files';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("open_files")]),_._v(" "),t("td",[_._v("1410")])])])]),_._v(" "),t("p",[_._v("mysql> show variables like 'open_files_limit';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("open_files_limit")]),_._v(" "),t("td",[_._v("4590")])])])]),_._v(" "),t("p",[_._v("比较合适的设置：open_files / open_files_limit * 100% <= 75％")]),_._v(" "),t("h2",{attrs:{id:"十、表锁情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、表锁情况","aria-hidden":"true"}},[_._v("#")]),_._v(" 十、表锁情况")]),_._v(" "),t("p",[_._v("mysql> show global status like 'table_locks%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("table_locks_immediate")]),_._v(" "),t("td",[_._v("490206328")])]),_._v(" "),t("tr",[t("td",[_._v("table_locks_waited")]),_._v(" "),t("td",[_._v("2084912")])])])]),_._v(" "),t("ul",[t("li",[_._v("table_locks_immediate表示立即释放表锁数，table_locks_waited表示需要等待的表锁数，如果 table_locks_immediate / table_locks_waited > 5000，最好采用innodb引擎，因为innodb是行锁而myisam是表锁，对于高并发写入的应用innodb效果会好些。示例中的服务器 table_locks_immediate / table_locks_waited ＝ 235，myisam就足够了。")])]),_._v(" "),t("h2",{attrs:{id:"十一、表扫描情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十一、表扫描情况","aria-hidden":"true"}},[_._v("#")]),_._v(" 十一、表扫描情况")]),_._v(" "),t("p",[_._v("mysql> show global status like 'handler_read%';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("handler_read_first")]),_._v(" "),t("td",[_._v("5803750")])]),_._v(" "),t("tr",[t("td",[_._v("handler_read_key")]),_._v(" "),t("td",[_._v("6049319850")])]),_._v(" "),t("tr",[t("td",[_._v("handler_read_next")]),_._v(" "),t("td",[_._v("94440908210")])]),_._v(" "),t("tr",[t("td",[_._v("handler_read_prev")]),_._v(" "),t("td",[_._v("34822001724")])]),_._v(" "),t("tr",[t("td",[_._v("handler_read_rnd")]),_._v(" "),t("td",[_._v("405482605")])]),_._v(" "),t("tr",[t("td",[_._v("handler_read_rnd_next")]),_._v(" "),t("td",[_._v("18912877839")])])])]),_._v(" "),t("p",[_._v("各字段解释参见http://hi.baidu.com/thinkinginlamp/blog/item/31690cd7c4bc5cdaa144df9c.html，调出服务器完成的查询请求次数：")]),_._v(" "),t("p",[_._v("mysql> show global status like 'com_select';")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("variable_name")]),_._v(" "),t("th",[_._v("value")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("com_select")]),_._v(" "),t("td",[_._v("222693559")])])])]),_._v(" "),t("p",[_._v("计算表扫描率：")]),_._v(" "),t("p",[_._v("表扫描率 ＝ handler_read_rnd_next / com_select")]),_._v(" "),t("p",[_._v("如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8mb。")]),_._v(" "),t("p",[_._v("后记：")]),_._v(" "),t("p",[_._v("文中提到一些数字都是参考值，了解基本原理就可以，除了mysql提供的各种status值外，操作系统的一些性能指标也很重要，比如常用的top,iostat等，尤其是iostat，现在的系统瓶颈一般都在磁盘io上，关于iostat的使用")])])},[],!1,null,null,null);e.default=a.exports}}]);